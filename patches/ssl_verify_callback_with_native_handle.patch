diff --git a/rtc_base/boringssl_certificate.cc b/rtc_base/boringssl_certificate.cc
index e1bcd61070..d05c55f06d 100644
--- a/rtc_base/boringssl_certificate.cc
+++ b/rtc_base/boringssl_certificate.cc
@@ -253,6 +253,12 @@ BoringSSLCertificate::BoringSSLCertificate(
   RTC_DCHECK(cert_buffer_ != nullptr);
 }
 
+BoringSSLCertificate::BoringSSLCertificate(
+    bssl::UniquePtr<CRYPTO_BUFFER> cert_buffer, SSL* ssl)
+    : cert_buffer_(std::move(cert_buffer)), ssl_(ssl) {
+  RTC_DCHECK(cert_buffer_ != nullptr);
+}
+ 
 std::unique_ptr<BoringSSLCertificate> BoringSSLCertificate::Generate(
     OpenSSLKeyPair* key_pair,
     const SSLIdentityParams& params) {
diff --git a/rtc_base/boringssl_certificate.h b/rtc_base/boringssl_certificate.h
index 40a4bd8f38..c969ec343c 100644
--- a/rtc_base/boringssl_certificate.h
+++ b/rtc_base/boringssl_certificate.h
@@ -34,6 +34,7 @@ class OpenSSLKeyPair;
 class BoringSSLCertificate final : public SSLCertificate {
  public:
   explicit BoringSSLCertificate(bssl::UniquePtr<CRYPTO_BUFFER> cert_buffer);
+  BoringSSLCertificate(bssl::UniquePtr<CRYPTO_BUFFER> cert_buffer, SSL* ssl);
 
   static std::unique_ptr<BoringSSLCertificate> Generate(
       OpenSSLKeyPair* key_pair,
@@ -73,6 +74,11 @@ class BoringSSLCertificate final : public SSLCertificate {
   // A handle to the DER encoded certificate data.
   bssl::UniquePtr<CRYPTO_BUFFER> cert_buffer_;
   RTC_DISALLOW_COPY_AND_ASSIGN(BoringSSLCertificate);
+
+ private:
+  SSL* ssl_ = nullptr;
+ public:
+  SSL* ssl() const { return ssl_; }
 };
 
 }  // namespace rtc
diff --git a/rtc_base/openssl_adapter.cc b/rtc_base/openssl_adapter.cc
index 7489bc992d..4de68b3df9 100644
--- a/rtc_base/openssl_adapter.cc
+++ b/rtc_base/openssl_adapter.cc
@@ -837,7 +837,7 @@ enum ssl_verify_result_t OpenSSLAdapter::SSLVerifyInternal(SSL* ssl,
     return ssl_verify_invalid;
   }
 
-  BoringSSLCertificate cert(bssl::UpRef(sk_CRYPTO_BUFFER_value(chain, 0)));
+  BoringSSLCertificate cert(bssl::UpRef(sk_CRYPTO_BUFFER_value(chain, 0)), ssl);
   if (!ssl_cert_verifier_->Verify(cert)) {
     RTC_LOG(LS_WARNING) << "Failed to verify certificate using custom callback";
     return ssl_verify_invalid;
@@ -909,7 +909,7 @@ int OpenSSLAdapter::SSLVerifyInternal(int previous_status,
     RTC_LOG(LS_ERROR) << "Failed to allocate CRYPTO_BUFFER.";
     return previous_status;
   }
-  const BoringSSLCertificate cert(std::move(crypto_buffer));
+  const BoringSSLCertificate cert(std::move(crypto_buffer), ssl);
 #else
   const OpenSSLCertificate cert(X509_STORE_CTX_get_current_cert(store));
 #endif
diff --git a/rtc_base/openssl_stream_adapter.cc b/rtc_base/openssl_stream_adapter.cc
index 95408f5945..ad5baa2ad0 100644
--- a/rtc_base/openssl_stream_adapter.cc
+++ b/rtc_base/openssl_stream_adapter.cc
@@ -1154,7 +1154,7 @@ enum ssl_verify_result_t OpenSSLStreamAdapter::SSLVerifyCallback(
   // Creates certificate chain.
   std::vector<std::unique_ptr<SSLCertificate>> cert_chain;
   for (CRYPTO_BUFFER* cert : chain) {
-    cert_chain.emplace_back(new BoringSSLCertificate(bssl::UpRef(cert)));
+    cert_chain.emplace_back(new BoringSSLCertificate(bssl::UpRef(cert), ssl));
   }
   stream->peer_cert_chain_.reset(new SSLCertChain(std::move(cert_chain)));
 
